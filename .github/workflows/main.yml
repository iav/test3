name: buildx for dockerhub

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
env:
  # TODO: Change variable to your image's name.
#   IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
   IMAGE_NAME: shtripok/test3  
   DOCKER_REGISTRY_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
  # DOCKERHUB_TOKEN should be set in "secrets" property of github repository

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  buildx:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      -
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        name: Checkout
        uses: actions/checkout@v2

#       -
#         name: create small fs for docker cache
#         run: |
          
#           sudo systemctl stop docker
#           sudo rm -rf /var/lib/docker/*
#           #apt list --installed
#           #sudo dd if=/dev/zero of=/swapfile1 bs=1M count=24K
#           sudo dd if=/dev/zero of=/swapfile1 bs=1M count=14K
#           sudo chmod 600 /swapfile1
          
#           sudo mkfs.btrfs /swapfile1
#           #sudo mkswap /swapfile1
#           #sudo swapon -a /swapfile1
          
#           #sudo swapon --show
#           sudo free -h

#           #sudo mount -t tmpfs -o size=10G,suid tmpfs /var/lib/docker
#           sudo mount -o suid /swapfile1 /var/lib/docker
#           mount
#           df -h
          
#           sudo systemctl start docker

#      - name: Log into registry
#        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u $DOCKER_REGISTRY_USERNAME --password-stdin

      - name: Setup qemu binfmt-support qemu-user-static
        run: |
          #id
          #sudo apt install qemu binfmt-support qemu-user-static
          update-binfmts --display
      -
        name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v3
        with:
          buildx-version: latest
          skip-cache: false
          qemu-version: latest
      -
        name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      -
        name: Prepare container names
        id: setvars
        run: |
          IMAGE_ID=$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          
          echo "::set-output name=IMAGE_ID::$IMAGE_ID"
          echo "::set-output name=VERSION::$VERSION"
          
          #docker buildx stop
          #docker volume prune -f
          
          echo -------------/proc/sys/fs/binfmt_misc/qemu-aarch64 before qemuuser-statis:register
          cat /proc/sys/fs/binfmt_misc/qemu-aarch64
          
          #sudo docker run --rm --privileged multiarch/qemu-user-static --reset -p yes --credential yes
          #echo -------------/proc/sys/fs/binfmt_misc/qemu-aarch64 after
          #cat /proc/sys/fs/binfmt_misc/qemu-aarch64
          
          #docker build --build-arg RUST_TARGET=aarch64-unknown-linux-musl --build-arg BASE_IMAGE=arm32v7/debian:buster-slim .
          #docker build --build-arg RUST_TARGET=x86_64-unknown-linux-musl .

      -
        name: Buildx arm64
        env: 
          IMAGE_ID: ${{ steps.setvars.outputs.IMAGE_ID }}
          VERSION: ${{ steps.setvars.outputs.VERSION }}
        run: |
          docker buildx build \
            --platform linux/arm64 \
            --tag $IMAGE_ID:$VERSION-arm64 \
            --build-arg RUST_TARGET=aarch64-unknown-linux-musl \
            --progress plain \
            --load .

      -
        name: Buildx amd64
        env: 
          IMAGE_ID: ${{ steps.setvars.outputs.IMAGE_ID }}
          VERSION: ${{ steps.setvars.outputs.VERSION }}
        run: 
          docker buildx build \
            --platform linux/amd64 \
            --tag $IMAGE_ID:$VERSION-amd64 \
            --build-arg RUST_TARGET=x86_64-unknown-linux-musl \
            --load \
            --progress plain .

      -
        name: Buildx armv7
        env: 
          IMAGE_ID: ${{ steps.setvars.outputs.IMAGE_ID }}
          VERSION: ${{ steps.setvars.outputs.VERSION }}
        run: |             
          docker buildx build \
            --platform linux/arm/v7 \
            --tag $IMAGE_ID:$VERSION-armv7 \
            --build-arg RUST_TARGET=armv7-unknown-linux-musleabihf \
            --progress plain \
            --load  .
             
          df -h
          

   
         
